# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        # Helper function to check mirror symmetry
        def dfs(left, right):
            if not left and not right:
                return True
            if not left or not right:
                return False
            return (left.val == right.val and
                dfs(left.left, right.right) and
                dfs(left.right, right.left))
        return dfs(root.left, root.right)

#2 Method 

#def isSymmetric(self, root: Optional[TreeNode]) -> bool:
 #   def isMirror(t1, t2):
  #      if not t1 and not t2:   # Both nodes are None
   #         return True
    #    if not t1 or not t2:    # One is None, the other isnâ€™t
     #       return False
      #  return (t1.val == t2.val and
       #         isMirror(t1.left, t2.right) and
        #        isMirror(t1.right, t2.left))  # mirror check

   # return isMirror(root, root)
