# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # If the list is empty or has only one node, there can't be a cycle
        if not head or not head.next:
            return None

        slow, fast = head, head  # Two pointers: slow moves one step, fast moves two steps

        # Move the pointers until they meet or reach the end of the list
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

            # If slow and fast meet, a cycle is detected
            if slow == fast:
                slow2 = head  # Start another pointer from the head

                # Move both pointers one step at a time until they meet
                while slow2 != slow:
                    slow = slow.next
                    slow2 = slow2.next

                return slow  # The meeting point is the start of the cycle

        return None  # If no cycle is found
