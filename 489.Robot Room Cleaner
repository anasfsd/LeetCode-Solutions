class Solution:
    def cleanRoom(self, robot):
        # Define movement directions: up, right, down, left
        # Each direction is represented as a (row_change, col_change)
        directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
        
        visited = set()  # Set to track visited cells using (row, col)

        def go_back():
            """
            Move the robot back to the previous cell and restore its direction.
            Since we can't directly go backward, we:
            - turn 180 degrees,
            - move forward (which is backward relative to original direction),
            - then turn 180 degrees again to face the original direction.
            """
            robot.turnRight()
            robot.turnRight()
            robot.move()
            robot.turnRight()
            robot.turnRight()
        
        def backtrack(row, col, d):
            """
            Clean the current cell and explore in all 4 directions using DFS.
            Parameters:
            - row, col: current logical position of the robot
            - d: current direction index (0=up, 1=right, 2=down, 3=left)
            """
            robot.clean()  # Clean the current cell
            visited.add((row, col))  # Mark cell as visited

            # Try all 4 directions
            for i in range(4):
                # Compute new direction index
                new_d = (d + i) % 4
                # Calculate the next cell's position
                new_row = row + directions[new_d][0]
                new_col = col + directions[new_d][1]

                # If the next cell hasn't been visited
                if (new_row, new_col) not in visited:
                    # Try to move forward to the next cell
                    if robot.move():
                        # If successful, continue DFS from new cell
                        backtrack(new_row, new_col, new_d)
                        # Backtrack to the previous cell and restore direction
                        go_back()

                # Turn robot right to face the next direction
                robot.turnRight()
        
        # Start DFS from (0, 0) facing up (direction index 0)
        backtrack(0, 0, 0)
